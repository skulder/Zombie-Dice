/* Zombie Dice Game v0.17 (2016.02.27)
 * 
 * Creation of RED DRAGON team
 * https://github.com/skulder/Zombie-Dice
 * 
 * Shortcut meanings in array definitions:
 * G,Y,R - Color of dice. Only used by pickDice method.
 * GF,YF,RF - Color of foot dice. Generated by diceValue and passed to pickDice. For determining many new dice needed
 * Brain,Shots - Scoring system
 * TG,TY,TR - Tracks many dices on table. For pickDice dice recalculation
 * GB,YB,RB - Tracks brain colors. Needed if bucked below 3 dices.
 * X - Not used. Left as utility for testing purposes only*/

import java.util.Scanner;
import java.util.Random;
import java.io.IOException;
class Assignment2
{
	public static void main(String[] args) throws IOException, InterruptedException
	{
		int[] dice = {0,0,0, 0,0,0, 0,0, 0,0,0, 0,0,0}; // {G,Y,R, GF,YF,RF, Brain,Shots, TG,TY,TR, GB,YB,RB}
		int[] rollDice = {0,0,0, 0,0,0, 0,0,0, 0}; // {X,X,X, GF,YF,RF, GB,YB,RB, Shots} rollDice output  
		
		int tempBrains	  = 0; 
		int tempShots	  = 0;
		int currentPlayer = 0;
		int playerCount	  = 0;
		int userAction	  = 0;
		
		clearScreen();
		System.out.println(" ____          _    _       ___  _");
		System.out.println("|_  /___ _ __ | |__(_)___  |   \\(_)__ ___");
		System.out.println(" / // _ \\ '  \\| '_ \\ / -_) | |) | / _/ -_)");
		System.out.println("/___\\___/_|_|_|_.__/_\\___| |___/|_\\__\\___|");
		System.out.println("\n> Welcome to Zombie Dice Game!");
		System.out.print("> Enter number of players: ");	
		
		Scanner in = new Scanner(System.in);
		playerCount = in.nextInt();
		int[] playerScore = new int[playerCount];
		
		String[] playerName = new String[playerCount]; // player naming
		for (int i = 0; i < playerCount; i++) 
		{
			System.out.print("> Enter player " + i + " name: ");
			playerName[i] = in.next();
		}
		
		clearScreen();
		System.out.println("> Total players " + playerCount);
		while (userAction != 3)
		{
			//1st menu line drawing
			System.out.println("\u250C\u2500\u2500 Menu \u2500\u2500\u2500"
			+ "\u2500\u2500\u2500\u2500\u2500\u2500\u2510"

			//1st table line
			+ "  \u2500 Brain \u2500 Shots \u2500 Player \u2500");

			//2nd menu  line
			System.out.println("\u2502 1 - Pick & Roll \u2502");

			//3rd menu line
			System.out.println("\u2502 2 - Stop        \u2502"

			//3rd table line
			+ "      " + tempBrains  + "       " + tempShots + "     " + playerName[currentPlayer]);

			//4th menu line
			System.out.println("\u2502 3 - Exit Game   \u2502");

			//5th menu line
			System.out.println("\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500"
			+ "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"

			//5th table line
			+ "  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"
			+ "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500"
			+ "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
			
			for (int i = 0; i < playerCount; i++) // display score
			{
				System.out.println(playerName[i] + " score " + playerScore[i]);
			}
			
			System.out.print("\n> Selection: ");
			userAction = in.nextInt();
			
			// menu options
			if (userAction == 1) // play
			{
				clearScreen();
				
				pickDice(dice);	// picks dice colors. depending many foot it gets from Dicevalue method 
				
				dice[8] = dice[8] + dice[0]; // adds to total dice player have on table. Needed for calculating pick ranges in pickDice
				dice[9] = dice[9] + dice[1];
				dice[10] = dice[10] + dice[2];
						
				// pickDice method output for debugging
				/*System.out.println("\npickDice output: " + dice[0] + " " + dice[1] + " " + dice[2] + "  " 
															+ dice[3] + " " + dice[4] + " " + dice[5] + "  "
				 											+ dice[6] + " " + dice[7] + "  " 
															+ dice[8] + " " + dice[9] + " " + dice[10] + "  "
															+ dice[11] + " " + dice[12] + " " + dice[13]);*/
				
				rollDice = diceValue(dice); // Rolls dice. returns foot values needed for pickDice. Brain colors for refils and score. Shotguns. 
				
				tempBrains = tempBrains + rollDice[6] + rollDice[7] + rollDice[8]; // temporary stats before "stop"
				tempShots = tempShots + rollDice[9]; 
				
				dice[11] = dice[11] + rollDice[6]; // tracking of brain color
				dice[12] = dice[12] + rollDice[7]; 
				dice[13] = dice[13] + rollDice[8];
				
				dice[3] = rollDice[3]; // passing values of feet needed for input to pickDice
				dice[4] = rollDice[4]; 
				dice[5] = rollDice[5]; 
				
				// diveValue method output for debugging
				/*System.out.println("diceValue output: " + rollDice[0] + " " + rollDice[1] + " " + rollDice[2] + "  " 
														  + rollDice[3] + " " + rollDice[4] + " " + rollDice[5] + "  " 
														  + rollDice[6] + " " + rollDice[7] + " " + rollDice[8] + "  " 
														  + rollDice[9]);*/
				
				System.out.println("> You rolled " + (rollDice[6] + rollDice[7] + rollDice[8]) + " brain, " + rollDice[9] 
												+ " Shotguns, " + (rollDice[3] + rollDice[4] + rollDice[5]) + " feet");
				
				if (tempShots >= 3) // Shotgun count check
				{
					clearScreen();
					System.out.println("> You got 3 shotguns! Returning dice and switching player.");
					dice[8] = 0; dice[9] = 0; dice[10] = 0; // resets dices on table 
					dice[11] = 0; dice[12] = 0; dice[13] = 0; // resets brain colors on table 
					tempBrains = 0; tempShots = 0;
					
					currentPlayer++;
					if (currentPlayer == playerCount)
					{
						currentPlayer = 0;
					}	
				}	
			} 
			
			else if (userAction == 2) // stop. end player turn
			{ 
				clearScreen();
				System.out.println("> Adding score and switching player");
				playerScore[currentPlayer] = playerScore[currentPlayer] + tempBrains;
				dice[8] = 0; dice[9] = 0; dice[10] = 0; // resets dice count on table 
				tempBrains = 0; tempShots = 0;
				
				if (playerScore[currentPlayer] >= 13) // winner?
				{
					clearScreen();
					System.out.println("> Congratulations! Player " + playerName[currentPlayer] + " won with " + playerScore[currentPlayer] + " brains");
					System.exit(1);
				}	
	
				currentPlayer++; // switching player
				if (currentPlayer == playerCount)
				{
					currentPlayer = 0;
				}	
			} 
			
			else if (userAction == 3) // exit
			{ 
				System.out.println("> Exiting...");
				System.exit(1);
			}
			
			else 
			{
				clearScreen();
				System.out.println("> Wrong menu option");
			}
		}
		in.close();
	}

	public static int[] pickDice (int[] playerDice)
	{  
		int greenDice  = 6 - playerDice[8];
		int yellowDice = 4 - playerDice[9];
		int redDice    = 3 - playerDice[10];
		int manyPicks  = playerDice[3] + playerDice[4] + playerDice[5]; // foot input. many new dice?
		
		playerDice[0] = 0; playerDice[1] = 0; playerDice[2] = 0; // array reset. will use for output
		
		for (; manyPicks < 3; manyPicks++)
		{
			int totalDice = greenDice + yellowDice + redDice; // recalculation of bucked size
			
			if (totalDice <= 2) // bucked refil from brains on table
			{
				totalDice = totalDice + playerDice[10] + playerDice[11] + playerDice[12];
				playerDice[10] = 0; playerDice[11] = 0; playerDice[12] = 0;
			}
			
			int pick = (int) (Math.random() * totalDice + 1); // picks 1 dice
			
			if (pick <= greenDice) // checks range 1...n which color
			{ 
				playerDice[0]++; // putting picked dice into an array and readying for output
				greenDice--; // 1 dice less in a bucket. 
			}
				
				else if (pick > greenDice && pick <= totalDice - redDice)
				{ 
					playerDice[1]++;
					yellowDice--;
				}
			
				else if (pick > greenDice + yellowDice)
				{
					playerDice[2]++;
					redDice--;
				}
			
				else 
					System.out.println("Error in pickDice");
		}
		
		playerDice[0] = playerDice[0] + playerDice[3]; // adding feet picked last time to output for re-rolling
		playerDice[1] = playerDice[1] + playerDice[4];
		playerDice[2] = playerDice[2] + playerDice[5];
		
		return playerDice;
	}

	public static int [] diceValue (int[] pickDice){
		
		Random r = new Random();
			
		int pickGreen	 = pickDice[0];  // renaming for better understanding
		int pickYellow	 = pickDice[1];  // The int pickGreen Pick... will allow me to know which dice to roll
		int pickRed		 = pickDice[2];
		
		int ftgreen 	 = 0; 
		int ftyellow 	 = 0;	// as it a new roll reset the value of the location of the footprint;
		int ftred 		 = 0;
		
		int greenBrains  = 0;
		int yellowBrains = 0;
		int redBrains 	 = 0;
	
		int gunshot		 = 0;

		// Integer represent the side of the dice. It s needed to do a random number 1 to 6 when the dice roll.
		int greenSide 	 = 0;
		int redSide 	 = 0;
		int yellowSide 	 = 0;

		while (pickGreen != 0)
		{
			// The integer green side correspond on which side the green dice face off
			greenSide = r.nextInt(6) + 1;
		
			// The Green Dice have 1 gunshot 3 Brains 2 FootPrint value 1 for gunshot			
			if (greenSide == 1)
			{
				gunshot++;
			}
			// value 2,3,4 for brains
			else if (greenSide > 1 && greenSide < 5)
			{
				greenBrains++;
			}
			else
			{
				ftgreen++;
			}
				pickGreen--;
		}
	
		while (pickRed != 0) 
		{
			// The integer Red side correspond on which side the red dice face off
			redSide= r.nextInt(6) + 1;
			// The Red Dice have 1 Brain 3 gunshot 2 FootPrint
			// value 1 for brain			
			if (redSide == 1)
			{
				redBrains++;
			}
			// value 2,3,4 for gunshot
				else if (redSide > 1 && redSide < 5)
				{
					gunshot++;
				}
				else 
				{
					ftred++;
				}
			pickRed--;
		}
	
		while (pickYellow != 0)
		{
			// The integer Yellow side correspond on which side the yellow dice face off
			yellowSide = r.nextInt(6) + 1;
			// The Yellow Dice have 2 gunshot 2 Brains 2 FootPrint value 1,2 for gunshot			
			if (yellowSide > 0 && yellowSide < 3)
			{
				gunshot++;
			}
			// value 3,4 for brains
			else if (yellowSide > 2 && yellowSide < 5)
			{
				yellowBrains++;
			}
			else
			{
				ftyellow++;
			}
			pickYellow--;
		}
		
		// create an array outvalue that will return the color of the dice G, Y, R,on which color of the footprint
		// and the value of the diced that just role ( eg if it s brains or gunshot)	
		
		int[] outvalue = new int[10];
		
		outvalue[3] = ftgreen;
		outvalue[4] = ftyellow;
		outvalue[5] = ftred; 
		outvalue[6] = greenBrains; 
		outvalue[7] = yellowBrains;
		outvalue[8] = redBrains;
		outvalue[9] = gunshot;
		
		return outvalue;
}
	//Clears screen. Invokes windows command line with "cls" parameter
	private static void clearScreen() throws IOException, InterruptedException
	{
		new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
	}
}